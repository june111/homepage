{"version":3,"sources":["components/headline.js","components/contact.js","components/collection.js","components/line.js","components/about.js","components/footer.js","pages/Index.js","pages/App.js","serviceWorker.js","index.js"],"names":["element","react_default","a","createElement","Headline","title","href","map","post","key","Contact","pic","Collection","Line","About","Footer","Home","App","Index_Home","Component","Boolean","window","location","hostname","match","ReactDOM","render","pages_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAGMA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,WAHW,YAIXF,EAAAC,EAAAC,cAAA,uBAGWC,EAAW,WACpB,OACIJ,GCJFA,EACFC,EAAAC,EAAAC,cAAA,UANY,CACZ,CAAEE,MAAO,QAASC,KAAM,8BACxB,CAAED,MAAO,SAAUC,KAAM,+BAKdC,IAAI,SAACC,GAAD,OACXP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKH,OACdJ,EAAAC,EAAAC,cAAA,KAAGG,KAAME,EAAKF,KAAMD,MAAOG,EAAKH,OAAQG,EAAKH,WAMxCK,EAAU,WACnB,OACIV,GCZFA,EACFC,EAAAC,EAAAC,cAAA,UANY,CACZ,CAAEE,MAAO,QAASC,KAAM,6BAA8BK,IAAI,IAC1D,CAAEN,MAAO,SAAUC,KAAM,6BAA8BK,IAAI,KAKhDJ,IAAI,SAACC,GAAD,OACXP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKH,OACdJ,EAAAC,EAAAC,cAAA,KAAGG,KAAME,EAAKF,KAAMD,MAAOG,EAAKH,OAAQG,EAAKH,WAMxCO,EAAa,WACtB,OACIZ,GCjBFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,oBAGWU,EAAO,WAChB,OACIb,GCNFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAJc,WAKdF,EAAAC,EAAAC,cAAA,6BAGWW,EAAQ,WACjB,OACId,GCTFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,6BAGWY,EAAS,WAClB,OACIf,GCSKgB,EAAO,WAChB,OACIf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAACC,EAAD,MACRH,EAAAC,EAAAC,cAACO,EAAD,OAEAT,EAAAC,EAAAC,cAACU,EAAD,MAEAZ,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,QCXeE,mLATX,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,cAJUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07787691.chunk.js","sourcesContent":["import React from 'react';\n\nconst name = 'June Zhu';\nconst element =\n    <section>\n\t\t<div>{name}</div>\n\t\t<button>blog</button>\n\t</section>\n\nexport const Headline = () => {\n    return (\n        element\n    )\n};","import React from 'react';\n\nconst content = [\n    { title: 'email', href: 'mailto:yula.qian@gmail.com' },\n    { title: 'github', href: 'https://github.com/june111' }\n];\n\nconst element = (\n    <ul>\n      {content.map((post) =>\n        <li key={post.title}>\n        <a href={post.href} title={post.title}>{post.title}</a>\n        </li>\n      )}\n    </ul>\n);\n\nexport const Contact = () => {\n    return (\n        element\n    )\n};","import React from 'react';\n\nconst content = [\n    { title: 'email', href: 'mailto:yula.qian@gmail.com', pic:''},\n    { title: 'github', href: 'https://github.com/june111', pic:'' }\n];\n\nconst element = (\n    <ul>\n      {content.map((post) =>\n        <li key={post.title}>\n        <a href={post.href} title={post.title}>{post.title}</a>\n        </li>\n      )}\n    </ul>\n);\n\nexport const Collection = () => {\n    return (\n        element\n    )\n};","import React from 'react';\n\nconst element =\n    <section>\n\t\t<div>Work</div>\n\t</section>\n\nexport const Line = () => {\n    return (\n        element\n    )\n};","import React from 'react';\n\nconst content = \"I'm xxx\";\nconst element =\n    <section>\n\t\t<div>About me</div>\n\t\t<p>{content}</p>\n\t\t<button>Contact Me</button>\n\t</section>\n\nexport const About = () => {\n    return (\n        element\n    )\n};","\nimport React from 'react';\n\nconst element =\n    <section>\n\t\t<div>June Zhu@2019</div>\n\t</section>\n\nexport const Footer = () => {\n    return (\n        element\n    )\n};","import React from 'react';\nimport {\n    Headline\n} from '../components/headline';\nimport {\n    Contact\n} from '../components/contact';\nimport {\n    Collection\n} from '../components/collection';\nimport {\n    Line\n} from '../components/line';\nimport {\n    About\n} from '../components/about';\nimport {\n    Footer\n} from '../components/footer';\nexport const Home = () => {\n    return (\n        <div>\n        <section>\n        <Headline />\n<Contact />\n</section>\n<Line />\n        \n<Collection />\n<About />\n<Footer />\n      </div>\n    )\n};","import React, {\n  Component\n} from 'react';\n\nimport {\n   Home\n} from './Index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}