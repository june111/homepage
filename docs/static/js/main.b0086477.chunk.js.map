{"version":3,"sources":["components/headline.js","store/db.js","components/contact.js","components/collection.js","components/line.js","components/about.js","components/footer.js","pages/Index.js","pages/App.js","serviceWorker.js","index.js"],"names":["element","react_default","a","createElement","className","Headline","title","href","icon","map","item","key","Contact","pic","Collection","Line","About","Footer","Home","App","Index_Home","Component","Boolean","window","location","hostname","match","ReactDOM","render","pages_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAGMA,EACFC,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACrBH,EAAAC,EAAAC,cAAA,UCLkB,YDMlBF,EAAAC,EAAAC,cAAA,UCLmB,qBDMnBF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,SAGWC,EAAW,WACpB,OACIL,GETFA,EACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UDDe,CAAC,CAChBG,MAAO,QACPC,KAAM,6BACNC,KAAM,YACNJ,UAAW,MAEf,CACIE,MAAO,WACPC,KAAM,iBACNC,KAAM,gBACNJ,UAAW,MAEf,CACIE,MAAO,SACPC,KAAM,6BACNC,KAAM,cACNJ,UAAW,OCdJK,IAAI,SAACC,GAAD,OACXT,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,EAAKJ,OACdL,EAAAC,EAAAC,cAAA,KAAGI,KAAMG,EAAKH,KAAMD,MAAOI,EAAKJ,MAAOF,UAAWM,EAAKN,WAAWH,EAAAC,EAAAC,cAAA,KAAGC,UAAWM,EAAKF,aAQhFI,EAAU,WACnB,OACIZ,GCfFA,EACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UFkBmB,CACvB,CAAEG,MAAO,QAASC,KAAM,6BAA8BM,IAAI,IAC1D,CAAEP,MAAO,QAASC,KAAM,6BAA8BM,IAAI,IAC1D,CAAEP,MAAO,QAASC,KAAM,6BAA8BM,IAAI,IAC1D,CAAEP,MAAO,QAASC,KAAM,6BAA8BM,IAAI,IAC1D,CAAEP,MAAO,SAAUC,KAAM,6BAA8BM,IAAI,KEtBzCJ,IAAI,SAACC,GAAD,OACdT,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,EAAKJ,MAAOF,UAAU,OAC3BH,EAAAC,EAAAC,cAAA,KAAGI,KAAMG,EAAKH,KAAMD,MAAOI,EAAKJ,aAQnCQ,EAAa,WACtB,OACId,GChBFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SAGWW,EAAO,WAChB,OACIf,GCNFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SJJmB,OIKnBF,EAAAC,EAAAC,cAAA,6BAGWa,EAAQ,WACjB,OACIhB,GCTFA,EACFC,EAAAC,EAAAC,cAAA,eACFF,EAAAC,EAAAC,cAAA,WLyBuB,kBKtBZc,EAAS,WAClB,OACIjB,GCSKkB,EAAO,WAChB,OACIjB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBAClBH,EAAAC,EAAAC,cAACE,EAAD,MACNJ,EAAAC,EAAAC,cAACS,EAAD,OAEDX,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,QCVYE,mLATX,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAD,cAJUC,mBCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b0086477.chunk.js","sourcesContent":["import React from 'react';\nimport {name,title} from '../store/db'\n\nconst element =\n    <section className=\"headline\">\n\t\t<h1>{name}</h1>\n\t\t<h2>{title}</h2>\n\t\t<button className=\"botton-red\">BLOG</button>\n\t</section>\n\nexport const Headline = () => {\n    return (\n        element\n    )\n};","export const name = 'June Zhu';\nexport const title = 'Software Engineer';\nexport const intro = 'Hi~';\n\nexport const content = [{\n        title: 'email',\n        href: 'mailto:yula.qian@gmail.com',\n        icon: 'icon-mail',\n        className: 'em'\n    },\n    {\n        title: 'telegram',\n        href: '+8618820209318',\n        icon: 'icon-telegram',\n        className: 'te'\n    },\n    {\n        title: 'github',\n        href: 'https://github.com/june111',\n        icon: 'icon-github',\n        className: 'gi'\n    }\n];\nexport const collection  = [\n    { title: 'email', href: 'mailto:yula.qian@gmail.com', pic:''},\n    { title: 'email', href: 'mailto:yula.qian@gmail.com', pic:''},\n    { title: 'email', href: 'mailto:yula.qian@gmail.com', pic:''},\n    { title: 'email', href: 'mailto:yula.qian@gmail.com', pic:''},\n    { title: 'github', href: 'https://github.com/june111', pic:'' }\n];\nexport const copyright = 'June Zhu@2019';\n","import React from 'react';\nimport {content} from '../store/db'\n\nconst element = (\n    <div className=\"contact\">\n        <ul >\n      {content.map((item) =>\n        <li key={item.title} >\n        <a href={item.href} title={item.title} className={item.className}><i className={item.icon}></i></a>\n        </li>\n      )}\n    </ul>\n    </div>\n\n);\n\nexport const Contact = () => {\n    return (\n        element\n    )\n};","import React from 'react';\nimport {collection} from '../store/db'\n\nconst element = (\n    <div className=\"collection\">\n        <ul>\n          {collection.map((item) =>\n            <li key={item.title} className=\"pic\">\n                <a href={item.href} title={item.title}></a>\n            </li>\n          )}\n        </ul>\n    </div>\n   \n);\n\nexport const Collection = () => {\n    return (\n        element\n    )\n};","import React from 'react';\n\nconst element =\n    <section>\n\t\t<div className=\"line\">Work</div>\n\t</section>\n\nexport const Line = () => {\n    return (\n        element\n    )\n};","import React from 'react';\nimport {intro} from '../store/db'\n\nconst element =\n    <section>\n\t\t<div>About</div>\n\t\t<p>{intro}</p>\n\t\t<button>Contact Me</button>\n\t</section>\n\nexport const About = () => {\n    return (\n        element\n    )\n};","import React from 'react';\nimport {copyright} from '../store/db'\n\nconst element =\n    <section>\n\t\t<div>{copyright}</div>\n\t</section>\n\nexport const Footer = () => {\n    return (\n        element\n    )\n};","import React from 'react';\nimport {\n    Headline\n} from '../components/headline';\nimport {\n    Contact\n} from '../components/contact';\nimport {\n    Collection\n} from '../components/collection';\nimport {\n    Line\n} from '../components/line';\nimport {\n    About\n} from '../components/about';\nimport {\n    Footer\n} from '../components/footer';\nexport const Home = () => {\n    return (\n        <div>\n\t        <section className=\"container-main\">\n\t        \t<Headline />\n\t\t\t\t<Contact />\n\t\t\t</section>\n\t\t\t<Line />\n\t\t\t<Collection />\n\t\t\t<About />\n\t\t\t<Footer />\n        </div>\n    )\n};","import React, {\n  Component\n} from 'react';\n\nimport {\n   Home\n} from './Index';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\nimport './styles/app.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}